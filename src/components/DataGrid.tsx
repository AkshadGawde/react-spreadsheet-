import React, { useState, useCallback, useRef, useEffect } from 'react';
import { SpreadsheetRow, SelectedCell } from '../types';
import { sampleData } from '../data/mockData';

const DataGrid: React.FC = () => {
  const [data] = useState<SpreadsheetRow[]>(sampleData);
  const [selectedCell, setSelectedCell] = useState<SelectedCell | null>(null);
  const [editingCell, setEditingCell] = useState<SelectedCell | null>(null);

  // Column resizing state
  const [colWidths, setColWidths] = useState<number[]>([
    80, 300, 120, 120, 140, 160, 140, 100, 120, 120
  ]);
  const resizingCol = useRef<number | null>(null);
  const startX = useRef<number>(0);
  const startWidth = useRef<number>(0);

  // --- ARROW KEYBOARD NAVIGATION LOGIC START ---
  const columns = [
    { key: 'index', label: '#', width: '60px' },
    { key: 'jobRequest', label: 'Job Request', width: '300px' },
    { key: 'submitted', label: 'Submitted', width: '120px' },
    { key: 'status', label: 'Status', width: '120px' },
    { key: 'submitter', label: 'Submitter', width: '140px' },
    { key: 'url', label: 'URL', width: '160px' },
    { key: 'assigned', label: 'Assigned', width: '140px' },
    { key: 'priority', label: 'Priority', width: '100px' },
    { key: 'dueDate', label: 'Due Date', width: '120px' },
    { key: 'estValue', label: 'Est. Value', width: '120px' },
  ];
  const totalRows = data.length + 20;
  const totalCols = columns.length;
  const cellRefs = useRef<(HTMLTableCellElement | null)[][]>([]);
  
  // Column resize handlers
  const handleResizeMouseDown = (e: React.MouseEvent, colIndex: number) => {
    e.preventDefault();
    resizingCol.current = colIndex;
    startX.current = e.clientX;
    startWidth.current = colWidths[colIndex];
    document.addEventListener('mousemove', handleResizeMouseMove);
    document.addEventListener('mouseup', handleResizeMouseUp);
  };

  const handleResizeMouseMove = (e: MouseEvent) => {
    if (resizingCol.current === null) return;
    const delta = e.clientX - startX.current;
    setColWidths(widths => {
      const newWidths = [...widths];
      newWidths[resizingCol.current!] = Math.max(60, startWidth.current + delta);
      return newWidths;
    });
  };

  const handleResizeMouseUp = () => {
    resizingCol.current = null;
    document.removeEventListener('mousemove', handleResizeMouseMove);
    document.removeEventListener('mouseup', handleResizeMouseUp);
  };
  
  useEffect(() => {
    cellRefs.current = Array.from({ length: totalRows }, () => Array(totalCols).fill(null));
  }, [data.length]);
  useEffect(() => {
    if (selectedCell) {
      const cell = cellRefs.current[selectedCell.row]?.[selectedCell.column];
      if (cell) {
        cell.focus({ preventScroll: true });
        cell.scrollIntoView({ block: 'nearest', inline: 'nearest' });
      }
    }
  }, [selectedCell]);
  const handleGridKeyDown = useCallback(
    (e: React.KeyboardEvent<HTMLDivElement>) => {
      if (!selectedCell) return;
      let { row, column } = selectedCell;
      if (e.key === 'ArrowDown') row = Math.min(row + 1, totalRows - 1);
      else if (e.key === 'ArrowUp') row = Math.max(row - 1, 0);
      else if (e.key === 'ArrowRight') column = Math.min(column + 1, totalCols - 1);
      else if (e.key === 'ArrowLeft') column = Math.max(column - 1, 0);
      else return;
      e.preventDefault();
      setSelectedCell({ row, column });
    },
    [selectedCell, totalRows, totalCols]
  );
  // --- ARROW KEYBOARD NAVIGATION LOGIC END ---

  const handleCellClick = useCallback((row: number, column: number) => {
    setSelectedCell({ row, column });
    console.log(`Cell clicked: row ${row}, column ${column}`);
  }, []);

  const handleCellDoubleClick = useCallback((row: number, column: number) => {
    setEditingCell({ row, column });
    console.log(`Cell editing: row ${row}, column ${column}`);
  }, []);

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'In-process':
        return 'bg-yellow-100 text-yellow-800 border border-yellow-200';
      case 'Need to start':
        return 'bg-blue-100 text-blue-800 border border-blue-200';
      case 'Complete':
        return 'bg-green-100 text-green-800 border border-green-200';
      case 'Blocked':
        return 'bg-red-100 text-red-800 border border-red-200';
      default:
        return 'bg-gray-100 text-gray-800 border border-gray-200';
    }
  };

  const getPriorityBadge = (priority: string) => {
    switch (priority) {
      case 'High':
        return 'text-red-600 font-medium';
      case 'Medium':
        return 'text-yellow-600 font-medium';
      case 'Low':
        return 'text-blue-600 font-medium';
      default:
        return 'text-gray-600 font-medium';
    }
  };

  const handleStatusClick = (rowId: number, currentStatus: string) => {
    console.log(`Status clicked for row ${rowId}: ${currentStatus}`);
  };

  const handlePriorityClick = (rowId: number, currentPriority: string) => {
    console.log(`Priority clicked for row ${rowId}: ${currentPriority}`);
  };

  const handleUrlClick = (url: string) => {
    console.log(`URL clicked: ${url}`);
  };

  return (
    <div
      className="flex flex-col h-full bg-white"
      tabIndex={0}
      onKeyDown={handleGridKeyDown}
      style={{ outline: 'none' }}
    >
      {/* Spreadsheet container */}
      <div className="flex-1 overflow-auto">
        <table className="w-full">
          {/* Header */}
          <thead>
            {/* Grouped header row */}
           <tr>
              <th className="bg-[#F7F8FA] border border-[#E3E5E8] px-4 py-3" style={{ width: '80px' }}></th>
              <th colSpan={5} className="bg-[#F7F8FA] border border-[#E3E5E8] px-6 py-3 text-left text-sm font-medium text-[#3B3F4C] tracking-wide" style={{ minWidth: '900px' }}>
                <div className="flex items-center">
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-3">
                    <path d="M6.16667 4.66667C6.44281 4.66667 6.66667 4.89053 6.66667 5.16667C6.66667 5.41771 6.48166 5.62554 6.24056 5.66125L6.16667 5.66667H4.66667C3.378 5.66667 2.33334 6.71134 2.33334 8C2.33334 9.24265 3.30472 10.2584 4.52957 10.3294L4.66667 10.3333H6.16667C6.44281 10.3333 6.66667 10.5572 6.66667 10.8333C6.66667 11.0844 6.48166 11.2922 6.24056 11.3279L6.16667 11.3333H4.66667C2.82572 11.3333 1.33334 9.84095 1.33334 8C1.33334 6.21484 2.73664 4.75744 4.5003 4.67075L4.66667 4.66667H6.16667ZM11.3333 4.66667C13.1743 4.66667 14.6667 6.15906 14.6667 8C14.6667 9.78517 13.2634 11.2426 11.4997 11.3293L11.3333 11.3333H9.83334C9.55719 11.3333 9.33334 11.1095 9.33334 10.8333C9.33334 10.5823 9.51834 10.3745 9.75945 10.3388L9.83334 10.3333H11.3333C12.622 10.3333 13.6667 9.28867 13.6667 8C13.6667 6.75736 12.6953 5.7416 11.4704 5.67063L11.3333 5.66667H9.83334C9.55719 5.66667 9.33334 5.44281 9.33334 5.16667C9.33334 4.91563 9.51834 4.70781 9.75945 4.67209L9.83334 4.66667H11.3333ZM4.66667 7.50001H11.3333C11.6095 7.50001 11.8333 7.72386 11.8333 8C11.8333 8.25314 11.6452 8.46233 11.4012 8.49544L11.3333 8.5H4.66667C4.39053 8.5 4.16667 8.27615 4.16667 8C4.16667 7.74687 4.35477 7.53768 4.59882 7.50457L4.66667 7.50001H11.3333H4.66667Z" fill="#1A8CFF"/>
                  </svg>
                  <span className="mr-3">Q3 Financial Overview</span>
                  <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M10.8337 3.4534C10.6662 3.67297 10.7085 3.98673 10.9281 4.15418C12.1203 5.06343 12.8333 6.47213 12.8333 8C12.8333 10.4906 10.9494 12.5413 8.52886 12.8047L8.97977 12.3535C9.17503 12.1583 9.17503 11.8417 8.97977 11.6464C8.80226 11.4689 8.52448 11.4528 8.32874 11.598L8.27266 11.6464L6.93933 12.9798C6.76182 13.1573 6.74568 13.4351 6.89092 13.6308L6.93933 13.6869L8.27266 15.0202C8.46793 15.2155 8.78451 15.2155 8.97977 15.0202C9.15728 14.8427 9.17342 14.5649 9.02818 14.3692L8.97977 14.3131L8.47961 13.8139C11.4769 13.57 13.8333 11.0602 13.8333 8C13.8333 6.15684 12.9721 4.45547 11.5345 3.35904C11.3149 3.19158 11.0012 3.23383 10.8337 3.4534ZM7.02021 0.979775C6.82495 1.17504 6.82495 1.49162 7.02021 1.68688L7.5197 2.18615C4.52271 2.43039 2.16666 4.94005 2.16666 8C2.16666 9.76297 2.95416 11.3983 4.2872 12.4994C4.5001 12.6753 4.81525 12.6452 4.99112 12.4323C5.16698 12.2194 5.13695 11.9043 4.92405 11.7284C3.81861 10.8153 3.16666 9.46146 3.16666 8C3.16666 5.50957 5.0502 3.45907 7.47045 3.19534L7.02021 3.64644C6.82495 3.8417 6.82495 4.15829 7.02021 4.35355C7.21547 4.54881 7.53205 4.54881 7.72732 4.35355L9.06065 3.02022C9.25591 2.82495 9.25591 2.50837 9.06065 2.31311L7.72732 0.979775C7.53205 0.784513 7.21547 0.784513 7.02021 0.979775Z" fill="#FA6736"/>
                  </svg>
                </div>
              </th>
              <th colSpan={1} className="bg-[#E6F0EA] border border-[#E3E5E8] px-4 py-3 text-center text-sm font-medium text-[#2B4A3D] tracking-wide" style={{ minWidth: '160px' }}>
                <div className="flex items-center justify-center">
                  <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-2">
                    <path d="M8.50001 2C8.77616 2 9.00001 2.22386 9.00001 2.5V6.33333H10.6636C11.6762 6.33333 12.497 7.15414 12.497 8.16667V12.2944L13.6467 11.1462C13.8421 10.9511 14.1587 10.9513 14.3538 11.1467C14.5489 11.3421 14.5487 11.6587 14.3533 11.8538L12.3503 13.8541C12.155 14.0492 11.8386 14.0491 11.6434 13.8539L9.64308 11.8536C9.44782 11.6583 9.44782 11.3417 9.64308 11.1464C9.83834 10.9512 10.1549 10.9512 10.3502 11.1464L11.497 12.2932V8.16667C11.497 7.70643 11.1239 7.33333 10.6636 7.33333H6.33328C5.87304 7.33333 5.49995 7.70643 5.49995 8.16667V12.2932L6.64673 11.1464C6.84199 10.9512 7.15858 10.9512 7.35384 11.1464C7.5491 11.3417 7.5491 11.6583 7.35384 11.8536L5.3535 13.8539C5.15824 14.0491 4.84166 14.0492 4.6464 13.8539L2.64602 11.8536C2.45076 11.6583 2.45076 11.3417 2.64602 11.1464C2.84128 10.9512 3.15786 10.9512 3.35312 11.1464L4.49995 12.2932V8.16667C4.49995 7.15414 5.32076 6.33333 6.33328 6.33333H8.00001V2.5C8.00001 2.22386 8.22387 2 8.50001 2Z" fill="#A3ACA3"/>
                  </svg>
                  <span>ABC ...</span>
                </div>
              </th>
              <th colSpan={2} className="bg-[#EAE6F7] border border-[#E3E5E8] px-3 py-2 text-center text-sm font-semibold text-[#3B2F4C] tracking-wide" style={{ minWidth: '220px' }}>
                <span className="inline-flex items-center">
                  <svg width="17" height="16" viewBox="0 0 17 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1"><path d="M8.50001 2C8.77616 2 9.00001 2.22386 9.00001 2.5V6.33333H10.6636C11.6762 6.33333 12.497 7.15414 12.497 8.16667V12.2944L13.6467 11.1462C13.8421 10.9511 14.1587 10.9513 14.3538 11.1467C14.5489 11.3421 14.5487 11.6587 14.3533 11.8538L12.3503 13.8541C12.155 14.0492 11.8386 14.0491 11.6434 13.8539L9.64308 11.8536C9.44782 11.6583 9.44782 11.3417 9.64308 11.1464C9.83834 10.9512 10.1549 10.9512 10.3502 11.1464L11.497 12.2932V8.16667C11.497 7.70643 11.1239 7.33333 10.6636 7.33333H6.33328C5.87304 7.33333 5.49995 7.70643 5.49995 8.16667V12.2932L6.64673 11.1464C6.84199 10.9512 7.15858 10.9512 7.35384 11.1464C7.5491 11.3417 7.5491 11.6583 7.35384 11.8536L5.3535 13.8539C5.15824 14.0491 4.84166 14.0492 4.6464 13.8539L2.64602 11.8536C2.45076 11.6583 2.45076 11.3417 2.64602 11.1464C2.84128 10.9512 3.15786 10.9512 3.35312 11.1464L4.49995 12.2932V8.16667C4.49995 7.15414 5.32076 6.33333 6.33328 6.33333H8.00001V2.5C8.00001 2.22386 8.22387 2 8.50001 2Z" fill="#A3ACA3"/></svg>
                  Answer a question ...
                </span>
              </th>
              <th
  colSpan={1}
  className="bg-[#F7EAE6] border border-[#E3E5E8] px-3 py-2 text-center text-sm font-semibold text-[#4C2B2B] tracking-wide"
  style={{ minWidth: '120px' }}
>
  <span className="inline-flex items-center">
    <svg
      width="17"
      height="16"
      viewBox="0 0 17 16"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className="mr-1"
    >
      <path
        d="M8.50001 2C8.77616 2 9.00001 2.22386 9.00001 2.5V6.33333H10.6636C11.6762 6.33333 12.497 7.15414 12.497 8.16667V12.2944L13.6467 11.1462C13.8421 10.9511 14.1587 10.9513 14.3538 11.1467C14.5489 11.3421 14.5487 11.6587 14.3533 11.8538L12.3503 13.8541C12.155 14.0492 11.8386 14.0491 11.6434 13.8539L9.64308 11.8536C9.44782 11.6583 9.44782 11.3417 9.64308 11.1464C9.83834 10.9512 10.1549 10.9512 10.3502 11.1464L11.497 12.2932V8.16667C11.497 7.70643 11.1239 7.33333 10.6636 7.33333H6.33328C5.87304 7.33333 5.49995 7.70643 5.49995 8.16667V12.2932L6.64673 11.1464C6.84199 10.9512 7.15858 10.9512 7.35384 11.1464C7.5491 11.3417 7.5491 11.6583 7.35384 11.8536L5.3535 13.8539C5.15824 14.0491 4.84166 14.0492 4.6464 13.8539L2.64602 11.8536C2.45076 11.6583 2.45076 11.3417 2.64602 11.1464C2.84128 10.9512 3.15786 10.9512 3.35312 11.1464L4.49995 12.2932V8.16667C4.49995 7.15414 5.32076 6.33333 6.33328 6.33333H8.00001V2.5C8.00001 2.22386 8.22387 2 8.50001 2Z"
        fill="#A3ACA3"
      />
    </svg>
    <span className="flex items-center">
      Extract <span className="ml-1 leading-none">...</span>
    </span>
  </span>
</th>
              <th colSpan={1} className="bg-[#E3E5E8] border border-[#E3E5E8] px-3 py-2 text-center text-xs font-semibold text-[#4C2B2B] tracking-wide" style={{ minWidth: '120px' }}>
                <span className="inline-flex items-center">
                  <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M9.79153 2.5C10.1079 2.5 10.3695 2.73501 10.4109 3.04007L10.4167 3.12487L10.4177 9.16667H16.4619C16.8071 9.16667 17.0869 9.44649 17.0869 9.79167C17.0869 10.1081 16.8518 10.3696 16.5467 10.411L16.4619 10.4167H10.4177L10.4194 16.4576C10.4194 16.8028 10.1397 17.0827 9.7945 17.0827C9.47808 17.0827 9.21654 16.8477 9.17509 16.5427L9.16937 16.4578L9.16766 10.4167H3.12683C2.78165 10.4167 2.50183 10.1368 2.50183 9.79167C2.50183 9.47525 2.73696 9.21376 3.04202 9.17237L3.12683 9.16667H9.16766L9.16666 3.12513C9.16659 2.77995 9.44635 2.5 9.79153 2.5Z" fill="#04071E"/>
</svg>

                </span>
              </th>
            </tr>
            
            {/* Column header row */}
            <tr>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] relative text-center"
                style={{ width: colWidths[0], minWidth: 60 }}
              >
                #
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 0)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[1], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <path d="M6.83333 2.33333H9.16667C9.44281 2.33333 9.66667 2.55719 9.66667 2.83333V3.99999H6.33333V2.83333C6.33333 2.55719 6.55719 2.33333 6.83333 2.33333ZM5.33333 2.83333V3.99999H4.16667C2.97005 3.99999 2 4.97004 2 6.16666V7.16666C2 7.81099 2.52233 8.33333 3.16667 8.33333H6.66667V8C6.66667 7.63181 6.96514 7.33333 7.33333 7.33333H8.66667C9.03486 7.33333 9.33333 7.6318 9.33333 8V8.33333H12.8333C13.4777 8.33333 14 7.81099 14 7.16666V6.16666C14 4.97004 13.03 3.99999 11.8333 3.99999H10.6667V2.83333C10.6667 2.0049 9.99509 1.33333 9.16667 1.33333H6.83333C6.00491 1.33333 5.33333 2.0049 5.33333 2.83333ZM14 8.99272C13.6632 9.20833 13.2629 9.33333 12.8333 9.33333H9.33333C9.33333 9.70152 9.03486 10 8.66667 10H7.33333C6.96514 10 6.66667 9.70152 6.66667 9.33333H3.16667C2.73712 9.33333 2.33677 9.20833 2 8.99272V11.1667C2 12.3633 2.97005 13.3333 4.16667 13.3333H11.8333C13.03 13.3333 14 12.3633 14 11.1667V8.99272Z" fill="#AFAFAF"/>
                      <path d="M6.83333 2.33333H9.16667C9.44281 2.33333 9.66667 2.55719 9.66667 2.83333V3.99999H6.33333V2.83333C6.33333 2.55719 6.55719 2.33333 6.83333 2.33333ZM5.33333 2.83333V3.99999H4.16667C2.97005 3.99999 2 4.97004 2 6.16666V7.16666C2 7.81099 2.52233 8.33333 3.16667 8.33333H6.66667V8C6.66667 7.63181 6.96514 7.33333 7.33333 7.33333H8.66667C9.03486 7.33333 9.33333 7.6318 9.33333 8V8.33333H12.8333C13.4777 8.33333 14 7.81099 14 7.16666V6.16666C14 4.97004 13.03 3.99999 11.8333 3.99999H10.6667V2.83333C10.6667 2.0049 9.99509 1.33333 9.16667 1.33333H6.83333C6.00491 1.33333 5.33333 2.0049 5.33333 2.83333ZM14 8.99272C13.6632 9.20833 13.2629 9.33333 12.8333 9.33333H9.33333C9.33333 9.70152 9.03486 10 8.66667 10H7.33333C6.96514 10 6.66667 9.70152 6.66667 9.33333H3.16667C2.73712 9.33333 2.33677 9.20833 2 8.99272V11.1667C2 12.3633 2.97005 13.3333 4.16667 13.3333H11.8333C13.03 13.3333 14 12.3633 14 11.1667V8.99272Z" fill="black" fillOpacity="0.7" style={{ mixBlendMode: 'hue' }}/>
                      <path d="M6.83333 2.33333H9.16667C9.44281 2.33333 9.66667 2.55719 9.66667 2.83333V3.99999H6.33333V2.83333C6.33333 2.55719 6.55719 2.33333 6.83333 2.33333ZM5.33333 2.83333V3.99999H4.16667C2.97005 3.99999 2 4.97004 2 6.16666V7.16666C2 7.81099 2.52233 8.33333 3.16667 8.33333H6.66667V8C6.66667 7.63181 6.96514 7.33333 7.33333 7.33333H8.66667C9.03486 7.33333 9.33333 7.6318 9.33333 8V8.33333H12.8333C13.4777 8.33333 14 7.81099 14 7.16666V6.16666C14 4.97004 13.03 3.99999 11.8333 3.99999H10.6667V2.83333C10.6667 2.0049 9.99509 1.33333 9.16667 1.33333H6.83333C6.00491 1.33333 5.33333 2.0049 5.33333 2.83333ZM14 8.99272C13.6632 9.20833 13.2629 9.33333 12.8333 9.33333H9.33333C9.33333 9.70152 9.03486 10 8.66667 10H7.33333C6.96514 10 6.66667 9.70152 6.66667 9.33333H3.16667C2.73712 9.33333 2.33677 9.20833 2 8.99272V11.1667C2 12.3633 2.97005 13.3333 4.16667 13.3333H11.8333C13.03 13.3333 14 12.3633 14 11.1667V8.99272Z" fill="white" fillOpacity="0.16"/>
                    </svg>
                    <span>Job Request</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 1)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[2], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <path d="M14 5.66667V11.8333C14 13.03 13.03 14 11.8333 14H4.16667C2.97005 14 2 13.03 2 11.8333V5.66667H14ZM4.83333 10C4.3731 10 4 10.3731 4 10.8333C4 11.2936 4.3731 11.6667 4.83333 11.6667C5.29357 11.6667 5.66667 11.2936 5.66667 10.8333C5.66667 10.3731 5.29357 10 4.83333 10ZM8 10C7.53976 10 7.16667 10.3731 7.16667 10.8333C7.16667 11.2936 7.53976 11.6667 8 11.6667C8.46024 11.6667 8.83333 11.2936 8.83333 10.8333C8.83333 10.3731 8.46024 10 8 10ZM4.83333 7C4.3731 7 4 7.3731 4 7.83333C4 8.29357 4.3731 8.66667 4.83333 8.66667C5.29357 8.66667 5.66667 8.29357 5.66667 7.83333C5.66667 7.3731 5.29357 7 4.83333 7ZM8 7C7.53976 7 7.16667 7.3731 7.16667 7.83333C7.16667 8.29357 7.53976 8.66667 8 8.66667C8.46024 8.66667 8.83333 8.29357 8.83333 7.83333C8.83333 7.3731 8.46024 7 8 7ZM11.1667 7C10.7064 7 10.3333 7.3731 10.3333 7.83333C10.3333 8.29357 10.7064 8.66667 11.1667 8.66667C11.6269 8.66667 12 8.29357 12 7.83333C12 7.3731 11.6269 7 11.1667 7ZM11.8333 2C13.03 2 14 2.97005 14 4.16667V4.66667H2V4.16667C2 2.97005 2.97005 2 4.16667 2H11.8333Z" fill="#AFAFAF"/>
                      <path d="M14 5.66667V11.8333C14 13.03 13.03 14 11.8333 14H4.16667C2.97005 14 2 13.03 2 11.8333V5.66667H14ZM4.83333 10C4.3731 10 4 10.3731 4 10.8333C4 11.2936 4.3731 11.6667 4.83333 11.6667C5.29357 11.6667 5.66667 11.2936 5.66667 10.8333C5.66667 10.3731 5.29357 10 4.83333 10ZM8 10C7.53976 10 7.16667 10.3731 7.16667 10.8333C7.16667 11.2936 7.53976 11.6667 8 11.6667C8.46024 11.6667 8.83333 11.2936 8.83333 10.8333C8.83333 10.3731 8.46024 10 8 10ZM4.83333 7C4.3731 7 4 7.3731 4 7.83333C4 8.29357 4.3731 8.66667 4.83333 8.66667C5.29357 8.66667 5.66667 8.29357 5.66667 7.83333C5.66667 7.3731 5.29357 7 4.83333 7ZM8 7C7.53976 7 7.16667 7.3731 7.16667 7.83333C7.16667 8.29357 7.53976 8.66667 8 8.66667C8.46024 8.66667 8.83333 8.29357 8.83333 7.83333C8.83333 7.3731 8.46024 7 8 7ZM11.1667 7C10.7064 7 10.3333 7.3731 10.3333 7.83333C10.3333 8.29357 10.7064 8.66667 11.1667 8.66667C11.6269 8.66667 12 8.29357 12 7.83333C12 7.3731 11.6269 7 11.1667 7ZM11.8333 2C13.03 2 14 2.97005 14 4.16667V4.66667H2V4.16667C2 2.97005 2.97005 2 4.16667 2H11.8333Z" fill="black" fillOpacity="0.7" style={{ mixBlendMode: "hue" }}/>
                      <path d="M14 5.66667V11.8333C14 13.03 13.03 14 11.8333 14H4.16667C2.97005 14 2 13.03 2 11.8333V5.66667H14ZM4.83333 10C4.3731 10 4 10.3731 4 10.8333C4 11.2936 4.3731 11.6667 4.83333 11.6667C5.29357 11.6667 5.66667 11.2936 5.66667 10.8333C5.66667 10.3731 5.29357 10 4.83333 10ZM8 10C7.53976 10 7.16667 10.3731 7.16667 10.8333C7.16667 11.2936 7.53976 11.6667 8 11.6667C8.46024 11.6667 8.83333 11.2936 8.83333 10.8333C8.83333 10.3731 8.46024 10 8 10ZM4.83333 7C4.3731 7 4 7.3731 4 7.83333C4 8.29357 4.3731 8.66667 4.83333 8.66667C5.29357 8.66667 5.66667 8.29357 5.66667 7.83333C5.66667 7.3731 5.29357 7 4.83333 7ZM8 7C7.53976 7 7.16667 7.3731 7.16667 7.83333C7.16667 8.29357 7.53976 8.66667 8 8.66667C8.46024 8.66667 8.83333 8.29357 8.83333 7.83333C8.83333 7.3731 8.46024 7 8 7ZM11.1667 7C10.7064 7 10.3333 7.3731 10.3333 7.83333C10.3333 8.29357 10.7064 8.66667 11.1667 8.66667C11.6269 8.66667 12 8.29357 12 7.83333C12 7.3731 11.6269 7 11.1667 7ZM11.8333 2C13.03 2 14 2.97005 14 4.16667V4.66667H2V4.16667C2 2.97005 2.97005 2 4.16667 2H11.8333Z" fill="white" fillOpacity="0.16"/>
                    </svg>
                    <span>Submitted</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 2)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[3], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <path d="M7.99998 1.33333C11.6819 1.33333 14.6666 4.3181 14.6666 8C14.6666 11.6819 11.6819 14.6667 7.99998 14.6667C4.31808 14.6667 1.33331 11.6819 1.33331 8C1.33331 4.3181 4.31808 1.33333 7.99998 1.33333ZM4.97976 6.64644C4.7845 6.8417 4.7845 7.15829 4.97976 7.35355L7.64643 10.0202C7.84169 10.2155 8.15827 10.2155 8.35353 10.0202L11.0202 7.35355C11.2155 7.15829 11.2155 6.8417 11.0202 6.64644C10.8249 6.45118 10.5084 6.45118 10.3131 6.64644L7.99998 8.95955L5.68687 6.64644C5.4916 6.45118 5.17502 6.45118 4.97976 6.64644Z" fill="#AFAFAF"/>
                      <path d="M7.99998 1.33333C11.6819 1.33333 14.6666 4.3181 14.6666 8C14.6666 11.6819 11.6819 14.6667 7.99998 14.6667C4.31808 14.6667 1.33331 11.6819 1.33331 8C1.33331 4.3181 4.31808 1.33333 7.99998 1.33333ZM4.97976 6.64644C4.7845 6.8417 4.7845 7.15829 4.97976 7.35355L7.64643 10.0202C7.84169 10.2155 8.15827 10.2155 8.35353 10.0202L11.0202 7.35355C11.2155 7.15829 11.2155 6.8417 11.0202 6.64644C10.8249 6.45118 10.5084 6.45118 10.3131 6.64644L7.99998 8.95955L5.68687 6.64644C5.4916 6.45118 5.17502 6.45118 4.97976 6.64644Z" fill="black" fillOpacity="0.7" style={{ mixBlendMode: 'hue' }}/>
                      <path d="M7.99998 1.33333C11.6819 1.33333 14.6666 4.3181 14.6666 8C14.6666 11.6819 11.6819 14.6667 7.99998 14.6667C4.31808 14.6667 1.33331 11.6819 1.33331 8C1.33331 4.3181 4.31808 1.33333 7.99998 1.33333ZM4.97976 6.64644C4.7845 6.8417 4.7845 7.15829 4.97976 7.35355L7.64643 10.0202C7.84169 10.2155 8.15827 10.2155 8.35353 10.0202L11.0202 7.35355C11.2155 7.15829 11.2155 6.8417 11.0202 6.64644C10.8249 6.45118 10.5084 6.45118 10.3131 6.64644L7.99998 8.95955L5.68687 6.64644C5.4916 6.45118 5.17502 6.45118 4.97976 6.64644Z" fill="white" fillOpacity="0.16"/>
                    </svg>
                    <span>Status</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 3)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[4], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <path d="M11.8361 9.33327C12.6641 9.33327 13.3353 10.0045 13.3353 10.8325V11.4448C13.3353 11.8271 13.2159 12.1998 12.9936 12.5108C11.963 13.9529 10.2802 14.6674 7.99998 14.6674C5.71933 14.6674 4.03736 13.9526 3.00925 12.5097C2.78794 12.1991 2.66901 11.8272 2.66901 11.4458V10.8325C2.66901 10.0045 3.34024 9.33327 4.16826 9.33327H11.8361ZM7.99998 1.33641C9.84093 1.33641 11.3333 2.82879 11.3333 4.66974C11.3333 6.51069 9.84093 8.00308 7.99998 8.00308C6.15903 8.00308 4.66665 6.51069 4.66665 4.66974C4.66665 2.82879 6.15903 1.33641 7.99998 1.33641Z" fill="#AFAFAF"/>
                      <path d="M11.8361 9.33327C12.6641 9.33327 13.3353 10.0045 13.3353 10.8325V11.4448C13.3353 11.8271 13.2159 12.1998 12.9936 12.5108C11.963 13.9529 10.2802 14.6674 7.99998 14.6674C5.71933 14.6674 4.03736 13.9526 3.00925 12.5097C2.78794 12.1991 2.66901 11.8272 2.66901 11.4458V10.8325C2.66901 10.0045 3.34024 9.33327 4.16826 9.33327H11.8361ZM7.99998 1.33641C9.84093 1.33641 11.3333 2.82879 11.3333 4.66974C11.3333 6.51069 9.84093 8.00308 7.99998 8.00308C6.15903 8.00308 4.66665 6.51069 4.66665 4.66974C4.66665 2.82879 6.15903 1.33641 7.99998 1.33641Z" fill="black" fillOpacity="0.7" style={{ mixBlendMode: 'hue' }}/>
                      <path d="M11.8361 9.33327C12.6641 9.33327 13.3353 10.0045 13.3353 10.8325V11.4448C13.3353 11.8271 13.2159 12.1998 12.9936 12.5108C11.963 13.9529 10.2802 14.6674 7.99998 14.6674C5.71933 14.6674 4.03736 13.9526 3.00925 12.5097C2.78794 12.1991 2.66901 11.8272 2.66901 11.4458V10.8325C2.66901 10.0045 3.34024 9.33327 4.16826 9.33327H11.8361ZM7.99998 1.33641C9.84093 1.33641 11.3333 2.82879 11.3333 4.66974C11.3333 6.51069 9.84093 8.00308 7.99998 8.00308C6.15903 8.00308 4.66665 6.51069 4.66665 4.66974C4.66665 2.82879 6.15903 1.33641 7.99998 1.33641Z" fill="white" fillOpacity="0.16"/>
                    </svg>
                    <span>Submitter</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 4)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[5], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <circle cx="8" cy="8" r="6.5" stroke="#AFAFAF" strokeWidth="1" fill="none"/>
                      <path d="M2 8h12M8 2v12" stroke="#AFAFAF" strokeWidth="1"/>
                      <path d="M8 2c2.21 0 4 2.69 4 6s-1.79 6-4 6-4-2.69-4-6 1.79-6 4-6z" stroke="#AFAFAF" strokeWidth="1" fill="none"/>
                    </svg>
                    <span>URL</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 5)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[6], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" className="mr-1">
                      <path d="M5.00002 5.00017V1.16667C5.00002 0.890529 5.22388 0.666672 5.50002 0.666672C5.77616 0.666672 6.00002 0.890529 6.00002 1.16667V5.00017C6.00002 5.18426 6.14926 5.3335 6.33335 5.3335C6.51745 5.3335 6.66669 5.18426 6.66669 5.00017V1.66667C6.66669 1.39053 6.89054 1.16667 7.16669 1.16667C7.44283 1.16667 7.66669 1.39053 7.66669 1.66667V5.50001C7.66669 5.51415 7.6661 5.52815 7.66495 5.542C7.95311 5.43312 8.31394 5.3308 8.66669 5.3308C8.99991 5.3308 9.28491 5.41403 9.49617 5.52043C9.60046 5.57296 9.69747 5.63652 9.77672 5.7086C9.81567 5.74403 9.86063 5.79083 9.89973 5.84899C9.93045 5.8947 10 6.00874 10 6.16667C10 6.33907 9.91121 6.4993 9.76502 6.59067L8.49412 7.38498L7.3889 8.64564L6.47071 9.91038C6.1258 10.3855 5.57422 10.6666 4.98713 10.6666H4.22811C3.60746 10.6666 3.01235 10.3514 2.69151 9.79257C2.49008 9.44174 2.24072 8.98076 2.04023 8.52452C1.84951 8.09048 1.66669 7.58261 1.66669 7.16664V2.50001C1.66669 2.22386 1.89054 2.00001 2.16669 2.00001C2.44283 2.00001 2.66669 2.22386 2.66669 2.50001V5.33196C2.66669 5.51605 2.81593 5.66529 3.00002 5.66529C3.18412 5.66529 3.33335 5.51605 3.33335 5.33196V1.66667C3.33335 1.39053 3.55721 1.16667 3.83335 1.16667C4.1095 1.16667 4.33335 1.39053 4.33335 1.66667V5.00017C4.33335 5.18426 4.48259 5.3335 4.66669 5.3335C4.85078 5.3335 5.00002 5.18426 5.00002 5.00017ZM9.99996 14.6667C7.86575 14.6667 6.06615 13.234 5.51044 11.278C6.10765 11.1501 6.6442 10.8061 7.01014 10.3021L7.91033 9.06211L8.93064 7.8983L10.1183 7.15602C10.4594 6.94282 10.6666 6.56894 10.6666 6.16669C10.6666 5.81248 10.5114 5.56406 10.453 5.47709C10.4203 5.42851 10.3864 5.38501 10.3532 5.34652C12.7655 5.52706 14.6666 7.54152 14.6666 10C14.6666 12.5773 12.5773 14.6667 9.99996 14.6667ZM12 9.33335C12 8.96516 11.7015 8.66669 11.3333 8.66669C10.9651 8.66669 10.6666 8.96516 10.6666 9.33335C10.6666 9.70154 10.9651 10 11.3333 10C11.7015 10 12 9.70154 12 9.33335ZM8.0915 11.1415C7.89248 11.3329 7.88633 11.6494 8.07776 11.8484C8.56232 12.3522 9.24478 12.6667 9.99983 12.6667C10.7549 12.6667 11.4374 12.3522 11.9219 11.8484C12.1133 11.6494 12.1072 11.3329 11.9082 11.1415C11.7092 10.95 11.3926 10.9562 11.2012 11.1552C10.8974 11.4711 10.4719 11.6667 9.99983 11.6667C9.52781 11.6667 9.10231 11.4711 8.79847 11.1552C8.60704 10.9562 8.29051 10.95 8.0915 11.1415ZM9.3333 9.33335C9.3333 8.96516 9.03482 8.66669 8.66663 8.66669C8.29844 8.66669 7.99996 8.96516 7.99996 9.33335C7.99996 9.70154 8.29844 10 8.66663 10C9.03482 10 9.3333 9.70154 9.3333 9.33335Z" fill="#83A588"/>
                      <path d="M5.00002 5.00017V1.16667C5.00002 0.890529 5.22388 0.666672 5.50002 0.666672C5.77616 0.666672 6.00002 0.890529 6.00002 1.16667V5.00017C6.00002 5.18426 6.14926 5.3335 6.33335 5.3335C6.51745 5.3335 6.66669 5.18426 6.66669 5.00017V1.66667C6.66669 1.39053 6.89054 1.16667 7.16669 1.16667C7.44283 1.16667 7.66669 1.39053 7.66669 1.66667V5.50001C7.66669 5.51415 7.6661 5.52815 7.66495 5.542C7.95311 5.43312 8.31394 5.3308 8.66669 5.3308C8.99991 5.3308 9.28491 5.41403 9.49617 5.52043C9.60046 5.57296 9.69747 5.63652 9.77672 5.7086C9.81567 5.74403 9.86063 5.79083 9.89973 5.84899C9.93045 5.8947 10 6.00874 10 6.16667C10 6.33907 9.91121 6.4993 9.76502 6.59067L8.49412 7.38498L7.3889 8.64564L6.47071 9.91038C6.1258 10.3855 5.57422 10.6666 4.98713 10.6666H4.22811C3.60746 10.6666 3.01235 10.3514 2.69151 9.79257C2.49008 9.44174 2.24072 8.98076 2.04023 8.52452C1.84951 8.09048 1.66669 7.58261 1.66669 7.16664V2.50001C1.66669 2.22386 1.89054 2.00001 2.16669 2.00001C2.44283 2.00001 2.66669 2.22386 2.66669 2.50001V5.33196C2.66669 5.51605 2.81593 5.66529 3.00002 5.66529C3.18412 5.66529 3.33335 5.51605 3.33335 5.33196V1.66667C3.33335 1.39053 3.55721 1.16667 3.83335 1.16667C4.1095 1.16667 4.33335 1.39053 4.33335 1.66667V5.00017C4.33335 5.18426 4.48259 5.3335 4.66669 5.3335C4.85078 5.3335 5.00002 5.18426 5.00002 5.00017ZM9.99996 14.6667C7.86575 14.6667 6.06615 13.234 5.51044 11.278C6.10765 11.1501 6.6442 10.8061 7.01014 10.3021L7.91033 9.06211L8.93064 7.8983L10.1183 7.15602C10.4594 6.94282 10.6666 6.56894 10.6666 6.16669C10.6666 5.81248 10.5114 5.56406 10.453 5.47709C10.4203 5.42851 10.3864 5.38501 10.3532 5.34652C12.7655 5.52706 14.6666 7.54152 14.6666 10C14.6666 12.5773 12.5773 14.6667 9.99996 14.6667ZM12 9.33335C12 8.96516 11.7015 8.66669 11.3333 8.66669C10.9651 8.66669 10.6666 8.96516 10.6666 9.33335C10.6666 9.70154 10.9651 10 11.3333 10C11.7015 10 12 9.70154 12 9.33335ZM8.0915 11.1415C7.89248 11.3329 7.88633 11.6494 8.07776 11.8484C8.56232 12.3522 9.24478 12.6667 9.99983 12.6667C10.7549 12.6667 11.4374 12.3522 11.9219 11.8484C12.1133 11.6494 12.1072 11.3329 11.9082 11.1415C11.7092 10.95 11.3926 10.9562 11.2012 11.1552C10.8974 11.4711 10.4719 11.6667 9.99983 11.6667C9.52781 11.6667 9.10231 11.4711 8.79847 11.1552C8.60704 10.9562 8.29051 10.95 8.0915 11.1415ZM9.3333 9.33335C9.3333 8.96516 9.03482 8.66669 8.66663 8.66669C8.29844 8.66669 7.99996 8.96516 7.99996 9.33335C7.99996 9.70154 8.29844 10 8.66663 10C9.03482 10 9.3333 9.70154 9.3333 9.33335Z" fill="black" fillOpacity="0.7" style={{ mixBlendMode: 'hue' }}/>
                      <path d="M5.00002 5.00017V1.16667C5.00002 0.890529 5.22388 0.666672 5.50002 0.666672C5.77616 0.666672 6.00002 0.890529 6.00002 1.16667V5.00017C6.00002 5.18426 6.14926 5.3335 6.33335 5.3335C6.51745 5.3335 6.66669 5.18426 6.66669 5.00017V1.66667C6.66669 1.39053 6.89054 1.16667 7.16669 1.16667C7.44283 1.16667 7.66669 1.39053 7.66669 1.66667V5.50001C7.66669 5.51415 7.6661 5.52815 7.66495 5.542C7.95311 5.43312 8.31394 5.3308 8.66669 5.3308C8.99991 5.3308 9.28491 5.41403 9.49617 5.52043C9.60046 5.57296 9.69747 5.63652 9.77672 5.7086C9.81567 5.74403 9.86063 5.79083 9.89973 5.84899C9.93045 5.8947 10 6.00874 10 6.16667C10 6.33907 9.91121 6.4993 9.76502 6.59067L8.49412 7.38498L7.3889 8.64564L6.47071 9.91038C6.1258 10.3855 5.57422 10.6666 4.98713 10.6666H4.22811C3.60746 10.6666 3.01235 10.3514 2.69151 9.79257C2.49008 9.44174 2.24072 8.98076 2.04023 8.52452C1.84951 8.09048 1.66669 7.58261 1.66669 7.16664V2.50001C1.66669 2.22386 1.89054 2.00001 2.16669 2.00001C2.44283 2.00001 2.66669 2.22386 2.66669 2.50001V5.33196C2.66669 5.51605 2.81593 5.66529 3.00002 5.66529C3.18412 5.66529 3.33335 5.51605 3.33335 5.33196V1.66667C3.33335 1.39053 3.55721 1.16667 3.83335 1.16667C4.1095 1.16667 4.33335 1.39053 4.33335 1.66667V5.00017C4.33335 5.18426 4.48259 5.3335 4.66669 5.3335C4.85078 5.3335 5.00002 5.18426 5.00002 5.00017ZM9.99996 14.6667C7.86575 14.6667 6.06615 13.234 5.51044 11.278C6.10765 11.1501 6.6442 10.8061 7.01014 10.3021L7.91033 9.06211L8.93064 7.8983L10.1183 7.15602C10.4594 6.94282 10.6666 6.56894 10.6666 6.16669C10.6666 5.81248 10.5114 5.56406 10.453 5.47709C10.4203 5.42851 10.3864 5.38501 10.3532 5.34652C12.7655 5.52706 14.6666 7.54152 14.6666 10C14.6666 12.5773 12.5773 14.6667 9.99996 14.6667ZM12 9.33335C12 8.96516 11.7015 8.66669 11.3333 8.66669C10.9651 8.66669 10.6666 8.96516 10.6666 9.33335C10.6666 9.70154 10.9651 10 11.3333 10C11.7015 10 12 9.70154 12 9.33335ZM8.0915 11.1415C7.89248 11.3329 7.88633 11.6494 8.07776 11.8484C8.56232 12.3522 9.24478 12.6667 9.99983 12.6667C10.7549 12.6667 11.4374 12.3522 11.9219 11.8484C12.1133 11.6494 12.1072 11.3329 11.9082 11.1415C11.7092 10.95 11.3926 10.9562 11.2012 11.1552C10.8974 11.4711 10.4719 11.6667 9.99983 11.6667C9.52781 11.6667 9.10231 11.4711 8.79847 11.1552C8.60704 10.9562 8.29051 10.95 8.0915 11.1415ZM9.3333 9.33335C9.3333 8.96516 9.03482 8.66669 8.66663 8.66669C8.29844 8.66669 7.99996 8.96516 7.99996 9.33335C7.99996 9.70154 8.29844 10 8.66663 10C9.03482 10 9.3333 9.70154 9.3333 9.33335Z" fill="white" fillOpacity="0.16"/>
                    </svg>
                    <span>Assigned</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 6)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[7], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <span>Priority</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 7)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[8], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <span>Due Date</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 8)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
              <th 
                className="bg-[#F7F8FA] border border-[#E3E5E8] px-3 py-2 text-xs font-bold text-[#3B3F4C] text-left relative"
                style={{ width: colWidths[9], minWidth: 60 }}
              >
                <span className="flex items-center justify-between w-full">
                  <span className="flex items-center">
                    <span>Est. Value</span>
                  </span>
                  <svg width="12" height="12" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M2.14645 4.14645C2.34171 3.95118 2.65829 3.95118 2.85355 4.14645L6 7.29289L9.14645 4.14645C9.34171 3.95118 9.65829 3.95118 9.85355 4.14645C10.0488 4.34171 10.0488 4.65829 9.85355 4.85355L6.35355 8.35355C6.15829 8.54882 5.84171 8.54882 5.64645 8.35355L2.14645 4.85355C1.95118 4.65829 1.95118 4.34171 2.14645 4.14645Z" fill="#AFAFAF"/>
                  </svg>
                </span>
                <div
                  onMouseDown={(e) => handleResizeMouseDown(e, 9)}
                  className="absolute right-0 top-0 h-full w-2 cursor-col-resize"
                  style={{ background: 'transparent' }}
                />
              </th>
            </tr>
          </thead>
          
          {/* Body */}
          <tbody className="bg-white">
            {data.map((row, rowIndex) => (
              <tr key={row.id} className="hover:bg-gray-50">
                {/* Index */}
                <td
                  ref={el => { cellRefs.current[rowIndex] = cellRefs.current[rowIndex] || []; cellRefs.current[rowIndex][0] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-sm text-center text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 0 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[0], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 0)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 0)}
                >
                  {row.id}
                </td>
                {/* Job Request */}
                <td
                  ref={el => { cellRefs.current[rowIndex][1] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 1 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[1], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 1)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 1)}
                >
                  {row.jobRequest}
                </td>
                {/* Submitted */}
                <td
                  ref={el => { cellRefs.current[rowIndex][2] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-right text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 2 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[2], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 2)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 2)}
                >
                  {row.submitted}
                </td>
                {/* Status */}
                <td
                  ref={el => { cellRefs.current[rowIndex][3] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-center text-sm ${selectedCell?.row === rowIndex && selectedCell?.column === 3 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[3], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 3)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 3)}
                >
                  <button
                    onClick={() => handleStatusClick(row.id, row.status)}
                    className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(row.status)}`}
                  >
                    {row.status}
                  </button>
                </td>
                {/* Submitter */}
                <td
                  ref={el => { cellRefs.current[rowIndex][4] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-left text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 4 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  onClick={() => handleCellClick(rowIndex, 4)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 4)}
                >
                  {row.submitter}
                </td>
                {/* URL */}
                <td
                  ref={el => { cellRefs.current[rowIndex][5] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-sm ${selectedCell?.row === rowIndex && selectedCell?.column === 5 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[5], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 5)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 5)}
                >
                  <button
                    onClick={() => handleUrlClick(row.url)}
                    className="text-black underline"
                  >
                    {row.url}
                  </button>
                </td>
                {/* Assigned */}
                <td
                  ref={el => { cellRefs.current[rowIndex][6] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 6 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[6], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 6)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 6)}
                >
                  {row.assigned}
                </td>
                {/* Priority */}
                <td
                  ref={el => { cellRefs.current[rowIndex][7] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-center text-sm ${selectedCell?.row === rowIndex && selectedCell?.column === 7 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[7], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 7)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 7)}
                >
                  <button
                    onClick={() => handlePriorityClick(row.id, row.priority)}
                    className={`text-sm ${getPriorityBadge(row.priority)}`}
                  >
                    {row.priority}
                  </button>
                </td>
                {/* Due Date */}
                <td
                  ref={el => { cellRefs.current[rowIndex][8] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-right text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 8 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[8], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 8)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 8)}
                >
                  {row.dueDate}
                </td>
                {/* Est. Value */}
                <td
                  ref={el => { cellRefs.current[rowIndex][9] = el; }}
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-right text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 9 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  style={{ width: colWidths[9], minWidth: 60 }}
                  onClick={() => handleCellClick(rowIndex, 9)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 9)}
                >
                  <div className="flex items-center justify-end space-x-1">
                    <span>{row.estValue}</span>
                    <svg width="7" height="8" viewBox="0 0 7 8" fill="none" xmlns="http://www.w3.org/2000/svg">
                      <path d="M4.59653 8L0.768531 5.012V4.04H2.86853C3.29253 4.04 3.63253 3.948 3.88853 3.764C4.15253 3.58 4.32053 3.312 4.39253 2.96H0.768531V2.06H4.39253C4.32053 1.708 4.15253 1.444 3.88853 1.268C3.63253 1.084 3.29253 0.991999 2.86853 0.991999L0.768531 0.98V0.0799997H6.62453V1.004L4.71653 0.991999C4.90053 1.064 5.05253 1.196 5.17253 1.388C5.30053 1.58 5.38853 1.804 5.43653 2.06H6.62453V2.96H5.44853C5.40053 3.328 5.26853 3.656 5.05253 3.944C4.84453 4.232 4.57253 4.46 4.23653 4.628C3.90053 4.796 3.50853 4.884 3.06053 4.892H2.26853L6.37253 8H4.59653Z" fill="#AFAFAF"/>
                    </svg>
                  </div>
                </td>
                <td
                  tabIndex={-1}
                  className={`border border-gray-200 px-3 py-2 text-sm text-gray-900 ${selectedCell?.row === rowIndex && selectedCell?.column === 9 ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                  onClick={() => handleCellClick(rowIndex, 9)}
                  onDoubleClick={() => handleCellDoubleClick(rowIndex, 9)}
                >
                </td>
              </tr>
            ))}
            {/* Empty rows for spreadsheet feel */}
            {Array.from({ length: 20 }, (_, index) => (
              <tr key={`empty-${index}`} className="hover:bg-gray-50">
                {columns.map((_, colIndex) => (
                  <td
                    ref={el => { cellRefs.current[data.length + index] = cellRefs.current[data.length + index] || []; cellRefs.current[data.length + index][colIndex] = el; }}
                    tabIndex={-1}
                    key={colIndex}
                    className={`border border-gray-200 px-3 py-2 h-10 text-center ${selectedCell?.row === data.length + index && selectedCell?.column === colIndex ? 'bg-blue-100 ring-2 ring-blue-500' : ''}`}
                    style={{ width: colWidths[colIndex], minWidth: 60 }}
                    onClick={() => handleCellClick(data.length + index, colIndex)}
                    onDoubleClick={() => handleCellDoubleClick(data.length + index, colIndex)}
                  >
                    {colIndex === 0 ? data.length + index + 1 : ''}
                  </td>
                ))}
                {/* Extra empty cell for '+' column */}
                <td className="border border-gray-200 px-3 py-2 h-10"></td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default DataGrid;
